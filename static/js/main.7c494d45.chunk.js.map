{"version":3,"sources":["model/vec-csv.ts","model/citipower-csv.ts","model/maths-helper.ts","components/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseCsv","file","a","Promise","resolve","reject","validateCsv","records","papaparse","worker","delimiter","header","step","results","onParseStep","complete","error","skipEmptyLines","firstLine","slice","text","startsWith","data","usageByHalfHour","buildUsageByHalfHour","Object","entries","hour","consumption","push","date","parse","Date","parseFloat","halfHourlyUsage","halfHour","timeStart","toString","padStart","padEnd","timeEnd","timeRange","blockKwh","isNaN","startOfFile","split","length","result","hourString","parseInt","substring","asc","arr","sort","b","quantile","q","sorted","pos","base","Math","floor","rest","undefined","q25","q75","median","q50","useStyles","makeStyles","theme","container","marginTop","spacing","marginBottom","paper","padding","title","color","palette","secondary","textAlign","display","fontSize","marginLeft","marginRight","heading","primary","main","verticalAlign","uploaded","borderRadius","shape","background","success","dark","overflowWrap","vecformat","maxWidth","margin","Upload","fileInputRef","React","createRef","useState","usageFile","setUsageFile","usageData","setUsageData","csvError","setCsvError","getFullYear","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","endTime","setEndTime","monday","tuesday","wednesday","thursday","friday","saturday","sunday","daysOfWeek","setDaysOfWeek","wfhUsage","setWfhUsage","wfhDays","setWfhDays","costPerKwh","setCostPerKwh","percentageUsage","setPercentageUsage","usageMaxQuantile","setUsageMaxQuantile","isProcessing","setIsProcessing","vecFormat","setVecFormat","classes","isDayOfWeekMatch","useCallback","getDay","Error","useMemo","UnitedParseCsv","CitipowerParseCsv","gtag","startTimeHoursDecimal","getHours","getMinutes","endTimeHoursDecimal","consumptionData","filter","x","map","Set","toDateString","size","wfhUsageSummary","max","reverse","q95","custom","wfhUsageSum","reduce","acc","cur","min","handleDaysOfWeekChange","event","target","name","checked","onFilesAdded","files","item","current","value","Container","className","Grid","direction","xs","Typography","variant","gutterBottom","Link","href","rel","Paper","FormControl","InputLabel","Select","onChange","MenuItem","ref","style","type","accept","Box","marginY","Button","onClick","click","FormHelperText","format","sm","FormLabel","autoOk","disableToolbar","label","inputVariant","InputAdornmentProps","position","fullWidth","mask","minutesStep","FormGroup","row","FormControlLabel","key","width","control","Checkbox","toLowerCase","CircularProgress","TextField","input","currentTarget","InputProps","endAdornment","InputAdornment","inputProps","round","m","createMuiTheme","overrides","MuiCssBaseline","html","WebkitFontSmoothing","body","backgroundColor","App","utils","DateFnsUtils","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c494d45.chunk.js","sourcesContent":["import * as papaparse from \"papaparse\";\nimport { parse } from \"date-fns\";\nimport { VecRecord } from \"./vecRecord\";\n\nexport const parseCsv = async (file: File): Promise<VecRecord[]> => {\n  return new Promise(async (resolve, reject) => {\n    if ((await validateCsv(file)) === false) return reject();\n    let records: VecRecord[] = [];\n\n    papaparse.parse(file, {\n      worker: true, // use web workers\n      delimiter: \",\",\n      header: true,\n      step: (results) => onParseStep(results, records),\n      complete: () => {\n        return resolve(records);\n      },\n      error: () => {\n        return reject();\n      },\n      skipEmptyLines: true,\n    });\n  });\n};\n\nconst validateCsv = async (file: File): Promise<boolean> => {\n  const firstLine = file.slice(0, 825, \"text/plain\");\n  const text = await firstLine.text();\n\n  // match text with expected CSV headers\n  return (\n    text.startsWith(\n      `\"NMI\",\"METER SERIAL NUMBER\",\"CON/GEN\",\"DATE\",\"ESTIMATED?\",\"00:00 - 00:30\",\"00:30 - 01:00\",\"01:00 - 01:30\",\"01:30 - 02:00\",\"02:00 - 02:30\",\"02:30 - 03:00\",\"03:00 - 03:30\",\"03:30 - 04:00\",\"04:00 - 04:30\",\"04:30 - 05:00\",\"05:00 - 05:30\",\"05:30 - 06:00\",\"06:00 - 06:30\",\"06:30 - 07:00\",\"07:00 - 07:30\",\"07:30 - 08:00\",\"08:00 - 08:30\",\"08:30 - 09:00\",\"09:00 - 09:30\",\"09:30 - 10:00\",\"10:00 - 10:30\",\"10:30 - 11:00\",\"11:00 - 11:30\",\"11:30 - 12:00\",\"12:00 - 12:30\",\"12:30 - 13:00\",\"13:00 - 13:30\",\"13:30 - 14:00\",\"14:00 - 14:30\",\"14:30 - 15:00\",\"15:00 - 15:30\",\"15:30 - 16:00\",\"16:00 - 16:30\",\"16:30 - 17:00\",\"17:00 - 17:30\",\"17:30 - 18:00\",\"18:00 - 18:30\",\"18:30 - 19:00\",\"19:00 - 19:30\",\"19:30 - 20:00\",\"20:00 - 20:30\",\"20:30 - 21:00\",\"21:00 - 21:30\",\"21:30 - 22:00\",\"22:00 - 22:30\",\"22:30 - 23:00\",\"23:00 - 23:30\",\"23:30 - 00:00\"`\n    ) ||\n    text.startsWith(\n      `NMI,METER SERIAL NUMBER,CON/GEN,DATE,ESTIMATED?,00:00 - 00:30,00:30 - 01:00,01:00 - 01:30,01:30 - 02:00,02:00 - 02:30,02:30 - 03:00,03:00 - 03:30,03:30 - 04:00,04:00 - 04:30,04:30 - 05:00,05:00 - 05:30,05:30 - 06:00,06:00 - 06:30,06:30 - 07:00,07:00 - 07:30,07:30 - 08:00,08:00 - 08:30,08:30 - 09:00,09:00 - 09:30,09:30 - 10:00,10:00 - 10:30,10:30 - 11:00,11:00 - 11:30,11:30 - 12:00,12:00 - 12:30,12:30 - 13:00,13:00 - 13:30,13:30 - 14:00,14:00 - 14:30,14:30 - 15:00,15:00 - 15:30,15:30 - 16:00,16:00 - 16:30,16:30 - 17:00,17:00 - 17:30,17:30 - 18:00,18:00 - 18:30,18:30 - 19:00,19:00 - 19:30,19:30 - 20:00,20:00 - 20:30,20:30 - 21:00,21:00 - 21:30,21:30 - 22:00,22:00 - 22:30,22:30 - 23:00,23:00 - 23:30,23:30 - 00:00`\n    )\n  );\n};\n\nconst onParseStep = (\n  results: papaparse.ParseResult<unknown>,\n  records: VecRecord[]\n) => {\n  const data = (results.data as unknown) as { [key: string]: string };\n\n  const isConsumption = data[\"CON/GEN\"] === \"Consumption\";\n\n  if (!isConsumption) {\n    return;\n  }\n\n  const usageByHalfHour = buildUsageByHalfHour(data);\n\n  for (const [hour, consumption] of Object.entries(usageByHalfHour)) {\n    records.push({\n      date: parse(data[\"DATE\"], \"dd/MM/yyyy\", new Date()),\n      hour: parseFloat(hour),\n      consumption: consumption,\n    });\n  };\n};\n\nconst buildUsageByHalfHour = (data: {\n  [key: string]: string;\n}): { [hour: number]: number } => {\n  let halfHourlyUsage: { [hour: number]: number } = {};\n\n  // loop through 30 minute blocks\n  for (let hour = 0; hour < 24; hour++) {\n    for (let halfHour = 0; halfHour < 2; halfHour++) {\n      let timeStart = `${hour.toString().padStart(2, \"0\")}:${(halfHour * 30)\n        .toString()\n        .padEnd(2, \"0\")}`;\n      let timeEnd =\n        halfHour === 0\n          ? `${hour.toString().padStart(2, \"0\")}:${((halfHour + 1) * 30)\n              .toString()\n              .padEnd(2, \"0\")}`\n          : `${(hour + 1).toString().padStart(2, \"0\")}:${((halfHour - 1) * 30)\n              .toString()\n              .padEnd(2, \"0\")}`;\n\n      if (timeEnd === \"24:00\") {\n        timeEnd = \"00:00\";\n      }\n\n      let timeRange = `${timeStart} - ${timeEnd}`;\n      let blockKwh = parseFloat(data[timeRange]);\n\n      if (isNaN(blockKwh)) {\n        blockKwh = 0;\n      }\n\n      // write record\n      halfHourlyUsage[hour + (halfHour ? 0.5 : 0)] = blockKwh;\n    }\n  }\n\n  return halfHourlyUsage;\n};\n","import * as papaparse from \"papaparse\";\nimport { parse } from \"date-fns\";\nimport { VecRecord } from \"./vecRecord\";\nimport { ParseResult } from \"papaparse\";\n\nexport const parseCsv = async (file: File): Promise<VecRecord[]> => {\n  return new Promise(async (resolve, reject) => {\n    if ((await validateCsv(file)) === false) return reject();\n    let records: VecRecord[] = [];\n\n    papaparse.parse(file, {\n      worker: true, // use web workers\n      delimiter: \",\",\n      header: false,\n      step: (results: ParseResult<string>) => onParseStep(results, records),\n      complete: () => {\n        return resolve(records);\n      },\n      error: () => {\n        return reject();\n      },\n      skipEmptyLines: true,\n    });\n  });\n};\n\nconst validateCsv = async (file: File): Promise<boolean> => {\n  const startOfFile = file.slice(0, 825, \"text/plain\");\n  const text = await startOfFile.text();\n  const firstLine = text.split(\"\\n\")[0];\n\n  // expect 12 columns in the first line\n  return firstLine.split(\",\").length === 12;\n};\n\nconst onParseStep = (\n  result: ParseResult<string>,\n  records: VecRecord[]\n) => {\n  // sample data\n  // 6102583120,14/07/2020,00:30,A4369789,E1,,,0.023,,VIC,,N\n\n  const isConsumption = result.data[4] === \"E1\";\n\n  // ignore non-consumption records\n  if (!isConsumption) {\n    return;\n  }\n\n  const hourString = result.data[2];\n\n  records.push({\n    date: parse(result.data[1], \"dd/MM/yyyy\", new Date()),\n    hour: parseInt(hourString.substring(0, 2)) + (hourString.substring(3,5) === \"30\" ? 0.5 : 0),\n    consumption: parseFloat(result.data[7]),\n  });\n};","// refactored from https://stackoverflow.com/a/55297611\n\nconst asc = (arr: number[]) => arr.sort((a, b) => a - b);\n\nconst sum = (arr: number[]) => arr.reduce((a, b) => a + b, 0);\n\nconst mean = (arr: number[]) => sum(arr) / arr.length;\n\n// standard deviation\nexport const std = (arr: number[]): number => {\n  const mu = mean(arr);\n  const diffArr = arr.map((a) => (a - mu) ** 2);\n  return Math.sqrt(sum(diffArr) / (arr.length - 1));\n};\n\n// max\nexport const max = (arr: number[]): number => {\n  return asc(arr).reverse()[0];\n};\n\n// quantiles\nexport const quantile = (arr: number[], q: number): number => {\n  const sorted = asc(arr);\n  const pos = (sorted.length - 1) * q;\n  const base = Math.floor(pos);\n  const rest = pos - base;\n  if (sorted[base + 1] !== undefined) {\n    return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\n  } else {\n    return sorted[base];\n  }\n};\n\nexport const q25 = (arr: number[]): number => quantile(arr, 0.25);\n\nexport const q50 = (arr: number[]): number => quantile(arr, 0.5);\n\nexport const q75 = (arr: number[]): number => quantile(arr, 0.75);\n\nexport const median = (arr: number[]): number => q50(arr);\n","import {\n  Box,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Container,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  Grid,\n  InputAdornment,\n  InputLabel,\n  Link,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { KeyboardDatePicker, KeyboardTimePicker } from \"@material-ui/pickers\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { parseCsv as UnitedParseCsv } from \"../model/vec-csv\";\nimport { parseCsv as CitipowerParseCsv } from \"../model/citipower-csv\";\nimport { parse, format } from \"date-fns\";\nimport DateRangeTwoToneIcon from \"@material-ui/icons/DateRangeTwoTone\";\nimport PowerIcon from \"@material-ui/icons/Power\";\nimport MonetizationOnIcon from \"@material-ui/icons/MonetizationOn\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport { max, median, q25, q75, quantile } from \"../model/maths-helper\";\nimport { VecRecord } from \"../model/vecRecord\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  title: {\n    color: theme.palette.text.secondary,\n    textAlign: \"center\",\n    \"& svg\": {\n      display: \"block\",\n      fontSize: 60,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      marginBottom: theme.spacing(1),\n    },\n  },\n  heading: {\n    color: theme.palette.primary.main,\n    \"& > svg\": {\n      verticalAlign: \"sub\",\n      marginRight: theme.spacing(1),\n    },\n  },\n  uploaded: {\n    borderRadius: theme.shape.borderRadius,\n    background: theme.palette.success.dark,\n    color: \"white\",\n    padding: theme.spacing(2),\n    overflowWrap: \"break-word\",\n  },\n  error: {\n    borderRadius: theme.shape.borderRadius,\n    background: theme.palette.error.dark,\n    color: \"white\",\n    padding: theme.spacing(2),\n  },\n  vecformat: {\n    maxWidth: 402,\n    display: 'flex',\n    margin: '0 auto'\n  },\n}));\n\ntype VecFormat = \"united\" | \"citipower\";\n\nexport const Upload = () => {\n  const fileInputRef = React.createRef<HTMLInputElement>();\n  const [usageFile, setUsageFile] = useState<File | undefined>(undefined);\n  const [usageData, setUsageData] = useState<VecRecord[]>();\n  const [csvError, setCsvError] = useState<boolean>(false);\n  const [startDate, setStartDate] = useState<Date>(\n    new Date(`${new Date().getFullYear() - 1}-06-01`)\n  );\n  const [endDate, setEndDate] = useState<Date>(\n    new Date(`${new Date().getFullYear()}-06-30`)\n  );\n  const [startTime, setStartTime] = useState<Date>(\n    parse(\"8:00 AM\", \"h:m a\", new Date())\n  );\n  const [endTime, setEndTime] = useState<Date>(\n    parse(\"5:00 PM\", \"h:m a\", new Date())\n  );\n  const [daysOfWeek, setDaysOfWeek] = React.useState({\n    monday: true,\n    tuesday: true,\n    wednesday: true,\n    thursday: true,\n    friday: true,\n    saturday: false,\n    sunday: false,\n  });\n  const [wfhUsage, setWfhUsage] = useState<number[]>();\n  const [wfhDays, setWfhDays] = useState<number>(0);\n  const [costPerKwh, setCostPerKwh] = useState<number>(0.22);\n  const [percentageUsage, setPercentageUsage] = useState<number>(100);\n  const [usageMaxQuantile, setUsageMaxQuantile] = useState<number>(95);\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n  const [vecFormat, setVecFormat] = useState<VecFormat>(\"united\");\n\n  const classes = useStyles();\n\n  const isDayOfWeekMatch = useCallback(\n    (date: Date) => {\n      const dateDayOfWeek = date.getDay();\n\n      switch (dateDayOfWeek) {\n        case 0:\n          return daysOfWeek.sunday;\n        case 1:\n          return daysOfWeek.monday;\n        case 2:\n          return daysOfWeek.tuesday;\n        case 3:\n          return daysOfWeek.wednesday;\n        case 4:\n          return daysOfWeek.thursday;\n        case 5:\n          return daysOfWeek.friday;\n        case 6:\n          return daysOfWeek.saturday;\n        default:\n          throw new Error();\n      }\n    },\n    [daysOfWeek]\n  );\n\n  /** Handle uploading data */\n  useMemo(async () => {\n    if (!usageFile) return;\n\n    try {\n      switch(vecFormat) {\n        case \"united\":\n          setUsageData(await UnitedParseCsv(usageFile));\n          break;\n        case \"citipower\":\n          setUsageData(await CitipowerParseCsv(usageFile));\n          break;\n      }\n      setCsvError(false);\n      gtag(\"event\", \"csv_parsed\");\n    } catch {\n      setUsageData(undefined);\n      setCsvError(true);\n      gtag(\"event\", \"csv_error\");\n    }\n  }, [usageFile, vecFormat]);\n\n  useMemo(async () => {\n    if (!usageData) return;\n\n    setIsProcessing(true);\n\n    // convert time to hours represented in decimal (e.g. 9:30 = 9.5)\n    const startTimeHoursDecimal =\n      startTime.getHours() + (startTime.getMinutes() >= 30 ? 0.5 : 0);\n    const endTimeHoursDecimal =\n      endTime.getHours() + (endTime.getMinutes() >= 30 ? 0.5 : 0);\n\n    // filter usage data by consumption\n    const consumptionData = usageData.filter(\n      (x) =>\n        x.date >= startDate &&\n        x.date <= endDate &&\n        isDayOfWeekMatch(x.date) &&\n        x.hour >= startTimeHoursDecimal &&\n        x.hour < endTimeHoursDecimal\n    );\n\n    const wfhUsage = consumptionData.map((x) => x.consumption);\n    const wfhDays = new Set(consumptionData.map((x) => x.date.toDateString()))\n      .size;\n\n    setWfhUsage(wfhUsage);\n    setWfhDays(wfhDays);\n\n    setIsProcessing(false);\n  }, [usageData, startTime, endTime, startDate, endDate, isDayOfWeekMatch]);\n\n  const wfhUsageSummary = useMemo(() => {\n    if (wfhUsage) {\n      return {\n        max: max(wfhUsage),\n        median: median(wfhUsage),\n        q25: q25(wfhUsage),\n        q75: q75(wfhUsage),\n        q95: quantile(wfhUsage, 0.95),\n        custom: quantile(wfhUsage, usageMaxQuantile / 100),\n      };\n    }\n  }, [wfhUsage, usageMaxQuantile]);\n\n  const wfhUsageSum = useMemo(() => {\n    if (!wfhUsage || !wfhUsageSummary) return 0;\n\n    return wfhUsage?.reduce(\n      (acc, cur) => acc + Math.min(cur, wfhUsageSummary.custom),\n      0\n    );\n  }, [wfhUsage, wfhUsageSummary]);\n\n  const handleDaysOfWeekChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDaysOfWeek({ ...daysOfWeek, [event.target.name]: event.target.checked });\n  };\n\n  const onFilesAdded = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (files?.length !== 1) {\n      return;\n    }\n\n    const file = files.item(0);\n\n    if (!file) {\n      return;\n    }\n\n    setUsageFile(file);\n\n    // analytics event\n    gtag(\"event\", \"select_csv\");\n\n    // clear file input\n    if (fileInputRef.current) fileInputRef.current.value = \"\";\n  };\n\n  const upload = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <Container maxWidth=\"sm\" className={classes.container}>\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item xs className={classes.title}>\n          <Typography variant=\"h6\" gutterBottom>\n            Home office electricity calculator\n            <br /> using Victorian Energy Compare Data\n          </Typography>\n          <Typography variant=\"body2\" gutterBottom>\n            To help calculate the electricity usage while working from home\n            during COVID lockdown for{\" \"}\n            <Link\n              href=\"https://www.ato.gov.au/individuals/income-and-deductions/deductions-you-can-claim/home-office-expenses/#Actualcostmethod\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              ATO's \"actual cost method\"\n            </Link>{\" \"}\n            of deducting home office expenses, this tool automatically processes\n            the{\" \"}\n            <Link\n              href=\"https://www.victorianenergysaver.vic.gov.au/energy-advice-for-business/accessing-and-understanding-energy-data\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Victorian Energy Compare Data\n            </Link>\n            .\n          </Typography>\n          <Typography variant=\"body2\" gutterBottom>\n            Note: This tool will not work if you have solar power due to net\n            metering - your usage offset by solar will not be reflected in the\n            Victorian Energy Compare consumption data.\n          </Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <InsertDriveFileIcon />\n              Victorian Energy Compare Data\n            </Typography>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Export your Victorian Energy Compare Data CSV file from your{\" \"}\n              <Link\n                href=\"https://www.victorianenergysaver.vic.gov.au/energy-advice-for-business/accessing-and-understanding-energy-data#portal\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                electricity retailer or distributor's website\n              </Link>\n              .\n            </Typography>\n            <FormControl variant=\"filled\" className={classes.vecformat}>\n              <InputLabel>CSV format</InputLabel>\n              <Select\n                value={vecFormat}\n                onChange={(event) =>\n                  setVecFormat(event.target.value as VecFormat)\n                }\n              >\n                <MenuItem value={\"united\"}>United/Powershop</MenuItem>\n                <MenuItem value={\"citipower\"}>CitiPower</MenuItem>\n              </Select>\n            </FormControl>\n            <input\n              ref={fileInputRef}\n              style={{ display: \"none\" }}\n              type=\"file\"\n              accept=\"text/csv\"\n              onChange={onFilesAdded}\n            />\n            <Box textAlign=\"center\" marginY={3}>\n              <Button\n                onClick={upload}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n              >\n                Select your Victorian Energy Compare CSV\n              </Button>\n              <FormHelperText style={{ textAlign: \"center\", marginTop: 10 }}>\n                No data is uploaded to any servers, processing is done in your\n                browser on your device.\n              </FormHelperText>\n            </Box>\n            {usageFile && usageData && (\n              <Box className={classes.uploaded}>\n                <strong>File name:</strong> {usageFile?.name}\n                <br />\n                <strong>File size:</strong> {usageFile?.size.toString()} bytes\n                <br />\n                <strong>Earliest record date:</strong>{\" \"}\n                {format(usageData[0].date, \"PPPP\")}\n                <br />\n                <strong>Latest record date:</strong>{\" \"}\n                {format(usageData[usageData.length - 1].date, \"PPPP\")}\n              </Box>\n            )}\n            {csvError && (\n              <Box className={classes.error}>\n                There was a problem processing the CSV. Please ensure this data\n                is in the correct Victorian Energy Compare Data format.\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <DateRangeTwoToneIcon />\n              Working from home schedule\n            </Typography>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Choose the appropriate times you work from home.\n            </Typography>\n            <Box marginY={2}>\n              <Grid container spacing={2}>\n                <Grid item sm>\n                  <FormLabel>Dates</FormLabel>\n                  <KeyboardDatePicker\n                    autoOk\n                    disableToolbar\n                    variant=\"inline\"\n                    label=\"Start date\"\n                    format=\"dd/MM/yyyy\"\n                    inputVariant=\"outlined\"\n                    value={startDate}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    onChange={(date) => date && setStartDate(date)}\n                    margin=\"normal\"\n                    fullWidth\n                  />\n                  <KeyboardDatePicker\n                    autoOk\n                    disableToolbar\n                    variant=\"inline\"\n                    label=\"End date\"\n                    format=\"dd/MM/yyyy\"\n                    inputVariant=\"outlined\"\n                    value={endDate}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    onChange={(date) => date && setEndDate(date)}\n                    margin=\"normal\"\n                    fullWidth\n                  />\n                  <FormHelperText>\n                    Selects dates when you began working from home full-time and\n                    the tax year end.\n                  </FormHelperText>\n                </Grid>\n                <Grid item sm>\n                  <FormLabel>Hours</FormLabel>\n                  <KeyboardTimePicker\n                    label=\"Start time\"\n                    mask=\"__:__ _M\"\n                    inputVariant=\"outlined\"\n                    value={startTime}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    minutesStep={30}\n                    onChange={(date) => date && setStartTime(date)}\n                    margin=\"normal\"\n                    fullWidth\n                  />\n                  <KeyboardTimePicker\n                    label=\"End time\"\n                    mask=\"__:__ _M\"\n                    inputVariant=\"outlined\"\n                    value={endTime}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    minutesStep={30}\n                    onChange={(date) => date && setEndTime(date)}\n                    margin=\"normal\"\n                    fullWidth\n                  />\n                  <FormHelperText>\n                    Usage data is only available in 30 minute increments.\n                  </FormHelperText>\n                </Grid>\n              </Grid>\n            </Box>\n            <Box marginTop={2}>\n              <FormLabel>Days of week</FormLabel>\n              <FormGroup row>\n                {[\n                  \"Monday\",\n                  \"Tuesday\",\n                  \"Wednesday\",\n                  \"Thursday\",\n                  \"Friday\",\n                  \"Saturday\",\n                  \"Sunday\",\n                ].map((value) => (\n                  <FormControlLabel\n                    key={value}\n                    style={{ width: 124 }}\n                    control={\n                      <Checkbox\n                        checked={(daysOfWeek as any)[value.toLowerCase()]}\n                        color=\"primary\"\n                        onChange={handleDaysOfWeekChange}\n                        name={value.toLowerCase()}\n                      />\n                    }\n                    label={value}\n                  />\n                ))}\n              </FormGroup>\n            </Box>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <PowerIcon />\n              Electricity usage\n            </Typography>\n            {isProcessing && <CircularProgress />}\n            {!isProcessing && (\n              <>\n                {usageData && wfhUsageSummary && (\n                  <>\n                    <Grid container spacing={2}>\n                      <Grid item sm={7}>\n                        <TextField\n                          label=\"Max quantiles\"\n                          variant=\"outlined\"\n                          margin=\"normal\"\n                          type=\"number\"\n                          value={usageMaxQuantile}\n                          onChange={(input) =>\n                            setUsageMaxQuantile(\n                              Math.min(parseInt(input.currentTarget.value), 100)\n                            )\n                          }\n                          InputProps={{\n                            endAdornment: (\n                              <InputAdornment position=\"end\">%</InputAdornment>\n                            ),\n                          }}\n                          inputProps={{\n                            max: 100,\n                          }}\n                          fullWidth\n                        />\n                        <FormHelperText>\n                          To remove outlier usage during your working schedule\n                          (e.g. kettles), the calculator will cap your 30 min\n                          usage to{\" \"}\n                          {Math.round(wfhUsageSummary.custom * 1000) / 1000}{\" \"}\n                          kWh.\n                        </FormHelperText>\n                      </Grid>\n                      <Grid item sm>\n                        <FormHelperText>\n                          <strong>Usage per 30 min block</strong>\n                          <br />\n                          Max: {Math.round(wfhUsageSummary.max * 1000) /\n                            1000}{\" \"}\n                          kWh\n                          <br />\n                          Q95: {Math.round(wfhUsageSummary.q95 * 1000) /\n                            1000}{\" \"}\n                          kWh\n                          <br />\n                          Upper quartile:{\" \"}\n                          {Math.round(wfhUsageSummary.q75 * 1000) / 1000} kWh\n                          <br />\n                          Median:{\" \"}\n                          {Math.round(wfhUsageSummary.median * 1000) / 1000} kWh\n                          <br />\n                          Lower quartile:{\" \"}\n                          {Math.round(wfhUsageSummary.q25 * 1000) / 1000} kWh\n                        </FormHelperText>\n                      </Grid>\n                    </Grid>\n                    {wfhUsageSum > 0 && (\n                      <Box m={4} textAlign=\"center\">\n                        <Box fontSize={28} color=\"primary.main\">\n                          {Math.round(wfhUsageSum * 1000) / 1000} kWh\n                        </Box>\n                        <Box color=\"text.secondary\">\n                          / {wfhDays} work days = ~\n                          {Math.round((wfhUsageSum / wfhDays) * 1000) / 1000}{\" \"}\n                          kWh per work day\n                        </Box>\n                      </Box>\n                    )}\n                    {wfhUsageSum === 0 && (\n                      <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                        <Box fontSize={20}>No electricity usage</Box>\n                        Check if your usage data and schedule are correct\n                      </Box>\n                    )}\n                  </>\n                )}\n                {!usageData && (\n                  <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                    Select data to calculate usage\n                  </Box>\n                )}\n              </>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <MonetizationOnIcon />\n              Electricity cost\n            </Typography>\n            {isProcessing && <CircularProgress />}\n            {!isProcessing && (\n              <>\n                {usageData && wfhUsageSum > 0 && (\n                  <>\n                    <Grid container spacing={2}>\n                      <Grid item xs sm={6}>\n                        <TextField\n                          label=\"Cost per kWh\"\n                          variant=\"outlined\"\n                          margin=\"normal\"\n                          type=\"number\"\n                          value={costPerKwh}\n                          onChange={(input) =>\n                            setCostPerKwh(parseFloat(input.currentTarget.value))\n                          }\n                          fullWidth\n                        />\n                        <FormHelperText>\n                          This tool only supports single-rate flat pricing.\n                        </FormHelperText>\n                      </Grid>\n                      <Grid item sm={6}>\n                        <TextField\n                          label=\"Apportion of costs\"\n                          variant=\"outlined\"\n                          margin=\"normal\"\n                          type=\"number\"\n                          value={percentageUsage}\n                          onChange={(input) =>\n                            setPercentageUsage(\n                              Math.min(parseInt(input.currentTarget.value), 100)\n                            )\n                          }\n                          InputProps={{\n                            endAdornment: (\n                              <InputAdornment position=\"end\">%</InputAdornment>\n                            ),\n                          }}\n                          inputProps={{\n                            max: 100,\n                          }}\n                          fullWidth\n                        />\n                        <FormHelperText>\n                          Refer to{\" \"}\n                          <Link\n                            href=\"https://www.ato.gov.au/individuals/income-and-deductions/deductions-you-can-claim/home-office-expenses/#:~:text=You%20must%20take%20into%20account%20other%20members%20of%20your%20household%20when%20you%20work%20out%20your%20expenses.%20If%20a%20member%20of%20your%20household%20is%20using%20the%20same%20area%20of%20the%20house%20or%20the%20same%20service%20when%20you're%20working,%20you%20must%20apportion%20your%20expenses%20accordingly.\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            ATO guidance\n                          </Link>{\" \"}\n                          on how to splits costs in a household.\n                        </FormHelperText>\n                      </Grid>\n                    </Grid>\n\n                    <Box m={4} textAlign=\"center\">\n                      <Box fontSize={28} color=\"primary.main\">\n                        $\n                        {Math.round(\n                          wfhUsageSum *\n                            costPerKwh *\n                            (percentageUsage / 100) *\n                            100\n                        ) / 100 || 0}\n                      </Box>\n                      <Box color=\"text.secondary\">\n                        / {wfhDays} work days = ~$\n                        {Math.round(\n                          ((wfhUsageSum *\n                            costPerKwh *\n                            (percentageUsage / 100)) /\n                            wfhDays) *\n                            1000\n                        ) / 1000 || 0}{\" \"}\n                        per work day\n                      </Box>\n                    </Box>\n                  </>\n                )}\n                {usageData && wfhUsageSum === 0 && (\n                  <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                    <Box fontSize={20}>No electricity usage</Box>\n                    Check if your usage data and schedule are correct\n                  </Box>\n                )}\n                {!usageData && (\n                  <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                    Select data to calculate usage\n                  </Box>\n                )}\n              </>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { Upload } from \"./components/Calculator\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        html: {\n          WebkitFontSmoothing: \"auto\",\n        },\n        body: {\n          backgroundColor: \"#dddfee\",\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Upload />\n      </ThemeProvider>\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}