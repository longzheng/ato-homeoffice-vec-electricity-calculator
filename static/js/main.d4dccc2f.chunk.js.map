{"version":3,"sources":["model/vec-csv.ts","components/Calculator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseCsv","file","a","Promise","resolve","reject","validateCsv","records","papaparse","worker","delimiter","header","step","results","onParseStep","complete","error","skipEmptyLines","firstLine","slice","text","data","push","nmi","parseInt","meter_serial_number","type","date","parse","Date","estimated","usageByHalfHour","buildUsageByHalfHour","halfHourlyUsage","hour","halfHour","timeStart","toString","padStart","padEnd","timeEnd","timeRange","blockKwh","parseFloat","isNaN","useStyles","makeStyles","theme","container","marginTop","spacing","marginBottom","paper","padding","title","color","palette","primary","main","textAlign","display","fontSize","marginLeft","marginRight","heading","verticalAlign","uploaded","borderRadius","shape","background","success","dark","Upload","fileInputRef","React","createRef","useState","undefined","usageFile","setUsageFile","usageData","setUsageData","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","endTime","setEndTime","monday","tuesday","wednesday","thursday","friday","saturday","sunday","daysOfWeek","setDaysOfWeek","wfhUsage","setWfhUsage","isProcessing","setIsProcessing","classes","isDayOfWeekMatch","useCallback","getDay","Error","isHourScheduleMatch","startTimeHoursDecimal","getHours","getMinutes","endTimeHoursDecimal","useMemo","consumptionData","filter","x","map","record","Object","entries","key","value","handleDaysOfWeekChange","event","target","name","checked","onFilesAdded","files","length","item","current","Container","maxWidth","className","Grid","direction","xs","Typography","variant","gutterBottom","href","rel","Paper","ref","style","accept","onChange","Box","marginY","Button","onClick","click","size","FormHelperText","sm","FormControl","FormLabel","autoOk","disableToolbar","label","format","inputVariant","InputAdornmentProps","position","margin","mask","minutesStep","FormGroup","row","FormControlLabel","control","Checkbox","toLowerCase","CircularProgress","m","Math","round","App","utils","DateFnsUtils","Fragment","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"ydAYaA,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACf,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAH,EAAA,sEACNI,EAAYL,GADN,uBACiB,IADjB,8CAC+BI,KAD/B,OAEbE,EAAuB,GAE3BC,QAAgBP,EAAM,CACpBQ,QAAQ,EACRC,UAAW,IACXC,QAAQ,EACRC,KAAM,SAACC,GAAD,OAAaC,EAAYD,EAASN,IACxCQ,SAAU,WACR,OAAOX,EAAQG,IAEjBS,MAAO,WACL,OAAOX,KAETY,gBAAgB,IAfD,2CAAZ,0DADe,2CAAH,sDAqBfX,EAAW,uCAAG,WAAOL,GAAP,iBAAAC,EAAA,6DACZgB,EAAYjB,EAAKkB,MAAM,EAAG,IAAK,cADnB,SAECD,EAAUE,OAFX,cAEZA,EAFY,yBAMZ,8zBAAJA,GANgB,2CAAH,sDAWXN,EAAc,SAClBD,EACAN,GAEA,IAAMc,EAAQR,EAAQQ,KAEtBd,EAAQe,KAAK,CACXC,IAAKC,SAASH,EAAI,KAClBI,oBAAqBD,SAASH,EAAK,wBACnCK,KAA0B,gBAApBL,EAAK,WAA+B,cAAgB,aAC1DM,KAAMC,YAAMP,EAAI,KAAU,aAAc,IAAIQ,MAC5CC,UAAkC,QAAvBT,EAAK,cAChBU,gBAAiBC,EAAqBX,MAIpCW,EAAuB,SAACX,GAM5B,IAHA,IAAIY,EAA6C,GAGxCC,EAAO,EAAGA,EAAO,GAAIA,IAC5B,IAAK,IAAIC,EAAW,EAAGA,EAAW,EAAGA,IAAY,CAC/C,IAAIC,EAAS,UAAMF,EAAKG,WAAWC,SAAS,EAAG,KAAlC,aAAsD,GAAXH,GACrDE,WACAE,OAAO,EAAG,MACTC,EACW,IAAbL,EAAA,UACOD,EAAKG,WAAWC,SAAS,EAAG,KADnC,aAC6D,IAAhBH,EAAW,IACjDE,WACAE,OAAO,EAAG,MAHjB,WAIQL,EAAO,GAAGG,WAAWC,SAAS,EAAG,KAJzC,aAImE,IAAhBH,EAAW,IACvDE,WACAE,OAAO,EAAG,MAEH,UAAZC,IACFA,EAAU,SAGZ,IAAIC,EAAS,UAAML,EAAN,cAAqBI,GAC9BE,EAAWC,WAAWtB,EAAKoB,IAE3BG,MAAMF,KACRA,EAAW,GAIbT,EAAgBC,GAAQC,EAAW,GAAM,IAAMO,EAInD,OAAOT,G,wECtEHY,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,UAAWF,EAAMG,QAAQ,GACzBC,aAAcJ,EAAMG,QAAQ,IAE9BE,MAAO,CACLC,QAASN,EAAMG,QAAQ,IAEzBI,MAAO,CACLC,MAAOR,EAAMS,QAAQC,QAAQC,KAC7BC,UAAW,SACX,UAAW,CACTC,QAAS,QACTC,SAAU,GACVC,WAAY,OACZC,YAAa,OACbZ,aAAcJ,EAAMG,QAAQ,KAGhCc,QAAS,CACPT,MAAOR,EAAMS,QAAQC,QAAQC,KAC7B,UAAW,CACTO,cAAe,MACfF,YAAahB,EAAMG,QAAQ,KAG/BgB,SAAU,CACRC,aAAcpB,EAAMqB,MAAMD,aAC1BE,WAAYtB,EAAMS,QAAQc,QAAQC,KAClChB,MAAO,QACPF,QAASN,EAAMG,QAAQ,QAIdsB,EAAS,WACpB,IAAMC,EAAeC,IAAMC,YADD,EAEQC,wBAA2BC,GAFnC,mBAEnBC,EAFmB,KAERC,EAFQ,OAGQH,qBAHR,mBAGnBI,EAHmB,KAGRC,EAHQ,OAIQL,mBAAe,IAAI/C,KAAK,eAJhC,mBAInBqD,EAJmB,KAIRC,EAJQ,OAKIP,mBAAe,IAAI/C,KAAK,eAL5B,mBAKnBuD,EALmB,KAKVC,EALU,OAMQT,mBAChChD,YAAM,UAAW,QAAS,IAAIC,OAPN,mBAMnByD,EANmB,KAMRC,EANQ,OASIX,mBAC5BhD,YAAM,UAAW,QAAS,IAAIC,OAVN,mBASnB2D,EATmB,KASVC,EATU,QAYUf,IAAME,SAAS,CACjDc,QAAQ,EACRC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,UAAU,EACVC,QAAQ,IAnBgB,qBAYnBC,GAZmB,MAYPC,GAZO,SAqBMtB,qBArBN,qBAqBnBuB,GArBmB,MAqBTC,GArBS,SAsBcxB,oBAAkB,GAtBhC,qBAsBnByB,GAtBmB,MAsBLC,GAtBK,MAwBpBC,GAAU1D,IAEV2D,GAAmBC,uBACvB,SAAC9E,GAGC,OAFsBA,EAAK+E,UAGzB,KAAK,EACH,OAAOT,GAAWD,OACpB,KAAK,EACH,OAAOC,GAAWP,OACpB,KAAK,EACH,OAAOO,GAAWN,QACpB,KAAK,EACH,OAAOM,GAAWL,UACpB,KAAK,EACH,OAAOK,GAAWJ,SACpB,KAAK,EACH,OAAOI,GAAWH,OACpB,KAAK,EACH,OAAOG,GAAWF,SACpB,QACE,MAAM,IAAIY,SAGhB,CAACV,KAGGW,GAAsBH,uBAC1B,SAACvE,GAEC,IAAM2E,EACJvB,EAAUwB,YAAcxB,EAAUyB,cAAgB,GAAK,GAAM,GACzDC,EACJxB,EAAQsB,YAActB,EAAQuB,cAAgB,GAAK,GAAM,GAE3D,OAAO7E,GAAQ2E,GAAyB3E,EAAO8E,IAEjD,CAAC1B,EAAWE,IAIdyB,kBAAO,sBAAC,sBAAA/G,EAAA,yDACD4E,EADC,sEAIJG,EAJI,SAIejF,EAAS8E,GAJxB,8IAQL,CAACA,IAEJmC,kBAAO,sBAAC,8BAAA/G,EAAA,yDACD8E,EADC,iDAGNsB,IAAgB,GAGVY,EAAkBlC,EAAUmC,QAChC,SAACC,GAAD,OACEA,EAAEzF,MAAQuD,GACVkC,EAAEzF,MAAQyD,GACVoB,GAAiBY,EAAEzF,OACR,gBAAXyF,EAAE1F,QAGFyE,EAAW,EACfe,EAAgBG,KAAI,SAACC,GACnB,cAA2BC,OAAOC,QAAQF,EAAOvF,iBAAjD,eAAmE,CAAC,IAAD,sBAAvD0F,EAAuD,KAAlDC,EAAkD,KAE7DxF,EAAOS,WAAW8E,GAClBb,GAAoB1E,KACtBiE,GAAYuB,OAKlBtB,GAAYD,GAEZG,IAAgB,GA3BV,2CA4BL,CAACtB,EAAWE,EAAWE,EAASoB,GAAkBI,KAErD,IAAMe,GAAyB,SAC7BC,GAEA1B,GAAc,eAAKD,GAAN,eAAmB2B,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,YAG7DC,GAAY,uCAAG,WAAOJ,GAAP,iBAAA1H,EAAA,yDAGG,KAAb,QAFH+H,EAAQL,EAAMC,OAAOI,aAElB,IAALA,OAAA,EAAAA,EAAOC,QAHQ,oDAObjI,EAAOgI,EAAME,KAAK,GAPL,iDAanBpD,EAAa9E,GAGTwE,EAAa2D,UAAS3D,EAAa2D,QAAQV,MAAQ,IAhBpC,2CAAH,sDAuBlB,OACE,kBAACW,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAWhC,GAAQvD,WAC1C,kBAACwF,EAAA,EAAD,CAAMxF,WAAS,EAACE,QAAS,EAAGuF,UAAU,UACpC,kBAACD,EAAA,EAAD,CAAML,MAAI,EAACO,IAAE,GACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWhC,GAAQjD,MAAOuF,cAAY,GAC7D,kBAAC,IAAD,MADF,0EAKA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GAA5C,8FAGE,uBACEC,KAAK,2HACLjB,OAAO,SACPkB,IAAI,YAHN,sBAHF,0GAW6C,IAC3C,uBACED,KAAK,iHACLjB,OAAO,SACPkB,IAAI,YAHN,iCAZF,MAsBF,kBAACP,EAAA,EAAD,CAAML,MAAI,EAACO,IAAE,GACX,kBAACM,EAAA,EAAD,CAAOT,UAAWhC,GAAQnD,OAC1B,kBAACuF,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWhC,GAAQvC,SACxC,kBAAC,IAAD,MADJ,iCAIE,kBAAC2E,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GAA5C,+DAC+D,IAC7D,uBACEC,KAAK,wHACLjB,OAAO,SACPkB,IAAI,YAHN,qCAFF,KAWA,2BACEE,IAAKxE,EACLyE,MAAO,CAAEtF,QAAS,QAClBlC,KAAK,OACLyH,OAAO,WACPC,SAAUpB,KAEZ,kBAACqB,EAAA,EAAD,CAAK1F,UAAU,SAAS2F,QAAS,GAC/B,kBAACC,EAAA,EAAD,CACEC,QA7DC,WAAO,IAAD,EACnB,UAAA/E,EAAa2D,eAAb,SAAsBqB,SA6DVb,QAAQ,YACRrF,MAAM,UACNmG,KAAK,SAJP,4CAQA,kBAACC,EAAA,EAAD,CAAgBT,MAAO,CAAEvF,UAAW,SAAUV,UAAW,KAAzD,2FAKD6B,GACC,kBAACuE,EAAA,EAAD,CAAKd,UAAWhC,GAAQrC,UAAxB,qBACcY,QADd,IACcA,OADd,EACcA,EAAWgD,KACvB,6BAFF,qBAGchD,QAHd,IAGcA,OAHd,EAGcA,EAAW4E,KAAKrH,WAH9B,YAQN,kBAACmG,EAAA,EAAD,CAAML,MAAI,GACR,kBAACa,EAAA,EAAD,CAAOT,UAAWhC,GAAQnD,OACxB,kBAACuF,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWhC,GAAQvC,SAC1C,kBAAC,IAAD,MADF,8BAIA,kBAAC2E,EAAA,EAAD,CAAYC,QAAQ,YAAYC,cAAY,GAA5C,oDAGA,kBAACL,EAAA,EAAD,CAAMxF,WAAS,EAACE,QAAS,GACvB,kBAACsF,EAAA,EAAD,CAAML,MAAI,EAACyB,GAAI,GACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAAC,IAAD,CACEC,QAAM,EACNC,gBAAc,EACdpB,QAAQ,SACRqB,MAAM,aACNC,OAAO,aACPC,aAAa,WACbzC,MAAOxC,EACPkF,oBAAqB,CAAEC,SAAU,SACjCjB,SAAU,SAACzH,GAAD,OAAUA,GAAQwD,EAAaxD,IACzC2I,OAAO,WAET,kBAAC,IAAD,CACEP,QAAM,EACNC,gBAAc,EACdpB,QAAQ,SACRqB,MAAM,WACNC,OAAO,aACPC,aAAa,WACbzC,MAAOtC,EACPgF,oBAAqB,CAAEC,SAAU,SACjCjB,SAAU,SAACzH,GAAD,OAAUA,GAAQ0D,EAAW1D,IACvC2I,OAAO,aAIb,kBAAC9B,EAAA,EAAD,CAAML,MAAI,EAACyB,GAAI,GACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAAC,IAAD,CACEG,MAAM,aACNM,KAAK,WACLJ,aAAa,WACbzC,MAAOpC,EACP8E,oBAAqB,CAAEC,SAAU,SACjCG,YAAa,GACbpB,SAAU,SAACzH,GAAD,OAAUA,GAAQ4D,EAAa5D,IACzC2I,OAAO,WAET,kBAAC,IAAD,CACEL,MAAM,WACNM,KAAK,WACLJ,aAAa,WACbzC,MAAOlC,EACP4E,oBAAqB,CAAEC,SAAU,SACjCG,YAAa,GACbpB,SAAU,SAACzH,GAAD,OAAUA,GAAQ8D,EAAW9D,IACvC2I,OAAO,WAET,kBAACX,EAAA,EAAD,gEAMN,kBAACN,EAAA,EAAD,CAAKpG,UAAW,GACd,kBAAC4G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACW,EAAA,EAAD,CAAWC,KAAG,GACX,CACC,SACA,UACA,YACA,WACA,SACA,WACA,UACArD,KAAI,SAACK,GAAD,OACJ,kBAACiD,EAAA,EAAD,CACElD,IAAKC,EACLkD,QACE,kBAACC,EAAA,EAAD,CACE9C,QAAU9B,GAAmByB,EAAMoD,eACnC1B,SAAUzB,GACVG,KAAMJ,EAAMoD,gBAGhBb,MAAOvC,YAQrB,kBAACc,EAAA,EAAD,CAAML,MAAI,GACR,kBAACa,EAAA,EAAD,CAAOT,UAAWhC,GAAQnD,OACxB,kBAACuF,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWhC,GAAQvC,SAC1C,kBAAC,IAAD,MADF,qBAICqC,IAAgB,kBAAC0E,EAAA,EAAD,OACf1E,IACA,yCACgBxB,IAAbsB,IAA0BA,GAAW,GACpC,kBAACkD,EAAA,EAAD,CACExF,SAAU,GACVmH,EAAG,EACHrH,UAAU,SACVJ,MAAM,gBAEN,kBAAC8F,EAAA,EAAD,KAAM4B,KAAKC,MAAiB,IAAX/E,IAAmB,IAApC,cAGUtB,IAAbsB,IAAuC,IAAbA,IACzB,kBAACkD,EAAA,EAAD,CAAK2B,EAAG,EAAGrH,UAAU,SAASJ,MAAM,kBAApC,6BAIYsB,IAAbsB,IACC,kBAACkD,EAAA,EAAD,CAAK2B,EAAG,EAAGrH,UAAU,SAASJ,MAAM,kBAApC,wC,iBC3XH4H,MAXf,WACE,OACE,kBAAC,IAAD,CAAyBC,MAAOC,KAC9B,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxL,GACLyL,QAAQzL,MAAMA,EAAM0L,c","file":"static/js/main.d4dccc2f.chunk.js","sourcesContent":["import * as papaparse from \"papaparse\";\nimport { parse } from \"date-fns\";\n\nexport type VecRecord = {\n  nmi: number;\n  meter_serial_number: number;\n  type: \"consumption\" | \"generation\";\n  date: Date;\n  estimated: boolean;\n  usageByHalfHour: { [hour: number]: number };\n};\n\nexport const parseCsv = async (file: File): Promise<VecRecord[]> => {\n  return new Promise(async (resolve, reject) => {\n    if ((await validateCsv(file)) === false) return reject();\n    let records: VecRecord[] = [];\n\n    papaparse.parse(file, {\n      worker: true, // use web workers\n      delimiter: \",\",\n      header: true,\n      step: (results) => onParseStep(results, records),\n      complete: () => {\n        return resolve(records);\n      },\n      error: () => {\n        return reject();\n      },\n      skipEmptyLines: true,\n    });\n  });\n};\n\nconst validateCsv = async (file: File): Promise<boolean> => {\n  const firstLine = file.slice(0, 825, \"text/plain\");\n  const text = await firstLine.text();\n\n  // match text with expected CSV headers\n  return (\n    text ===\n    `\"NMI\",\"METER SERIAL NUMBER\",\"CON/GEN\",\"DATE\",\"ESTIMATED?\",\"00:00 - 00:30\",\"00:30 - 01:00\",\"01:00 - 01:30\",\"01:30 - 02:00\",\"02:00 - 02:30\",\"02:30 - 03:00\",\"03:00 - 03:30\",\"03:30 - 04:00\",\"04:00 - 04:30\",\"04:30 - 05:00\",\"05:00 - 05:30\",\"05:30 - 06:00\",\"06:00 - 06:30\",\"06:30 - 07:00\",\"07:00 - 07:30\",\"07:30 - 08:00\",\"08:00 - 08:30\",\"08:30 - 09:00\",\"09:00 - 09:30\",\"09:30 - 10:00\",\"10:00 - 10:30\",\"10:30 - 11:00\",\"11:00 - 11:30\",\"11:30 - 12:00\",\"12:00 - 12:30\",\"12:30 - 13:00\",\"13:00 - 13:30\",\"13:30 - 14:00\",\"14:00 - 14:30\",\"14:30 - 15:00\",\"15:00 - 15:30\",\"15:30 - 16:00\",\"16:00 - 16:30\",\"16:30 - 17:00\",\"17:00 - 17:30\",\"17:30 - 18:00\",\"18:00 - 18:30\",\"18:30 - 19:00\",\"19:00 - 19:30\",\"19:30 - 20:00\",\"20:00 - 20:30\",\"20:30 - 21:00\",\"21:00 - 21:30\",\"21:30 - 22:00\",\"22:00 - 22:30\",\"22:30 - 23:00\",\"23:00 - 23:30\",\"23:30 - 00:00\"`\n  );\n};\n\nconst onParseStep = (\n  results: papaparse.ParseResult<unknown>,\n  records: VecRecord[]\n) => {\n  const data = (results.data as unknown) as { [key: string]: string };\n\n  records.push({\n    nmi: parseInt(data[\"NMI\"]),\n    meter_serial_number: parseInt(data[\"METER SERIAL NUMBER\"]),\n    type: data[\"CON/GEN\"] === \"Consumption\" ? \"consumption\" : \"generation\",\n    date: parse(data[\"DATE\"], \"dd/MM/yyyy\", new Date()),\n    estimated: data[\"ESTIMATED?\"] === \"Yes\",\n    usageByHalfHour: buildUsageByHalfHour(data),\n  });\n};\n\nconst buildUsageByHalfHour = (data: {\n  [key: string]: string;\n}): { [key: number]: number } => {\n  let halfHourlyUsage: { [key: number]: number } = {};\n\n  // loop through 30 minute blocks\n  for (let hour = 0; hour < 24; hour++) {\n    for (let halfHour = 0; halfHour < 2; halfHour++) {\n      let timeStart = `${hour.toString().padStart(2, \"0\")}:${(halfHour * 30)\n        .toString()\n        .padEnd(2, \"0\")}`;\n      let timeEnd =\n        halfHour === 0\n          ? `${hour.toString().padStart(2, \"0\")}:${((halfHour + 1) * 30)\n              .toString()\n              .padEnd(2, \"0\")}`\n          : `${(hour + 1).toString().padStart(2, \"0\")}:${((halfHour - 1) * 30)\n              .toString()\n              .padEnd(2, \"0\")}`;\n\n      if (timeEnd === \"24:00\") {\n        timeEnd = \"00:00\";\n      }\n\n      let timeRange = `${timeStart} - ${timeEnd}`;\n      let blockKwh = parseFloat(data[timeRange]);\n\n      if (isNaN(blockKwh)) {\n        blockKwh = 0;\n      }\n\n      // write record\n      halfHourlyUsage[hour + (halfHour ? 0.5 : 0)] = blockKwh;\n    }\n  }\n\n  return halfHourlyUsage;\n};\n","import {\n  Box,\n  Button,\n  Checkbox,\n  CircularProgress,\n  Container,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport { KeyboardDatePicker, KeyboardTimePicker } from \"@material-ui/pickers\";\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { parseCsv } from \"../model/vec-csv\";\nimport { parse } from \"date-fns\";\nimport DateRangeTwoToneIcon from \"@material-ui/icons/DateRangeTwoTone\";\nimport PowerIcon from \"@material-ui/icons/Power\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport { VecRecord } from \"../model/vec-csv\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(6),\n    marginBottom: theme.spacing(6),\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  title: {\n    color: theme.palette.primary.main,\n    textAlign: \"center\",\n    \"& > svg\": {\n      display: \"block\",\n      fontSize: 60,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      marginBottom: theme.spacing(1),\n    },\n  },\n  heading: {\n    color: theme.palette.primary.main,\n    \"& > svg\": {\n      verticalAlign: \"sub\",\n      marginRight: theme.spacing(1),\n    },\n  },\n  uploaded: {\n    borderRadius: theme.shape.borderRadius,\n    background: theme.palette.success.dark,\n    color: \"white\",\n    padding: theme.spacing(2),\n  },\n}));\n\nexport const Upload = () => {\n  const fileInputRef = React.createRef<HTMLInputElement>();\n  const [usageFile, setUsageFile] = useState<File | undefined>(undefined);\n  const [usageData, setUsageData] = useState<VecRecord[]>();\n  const [startDate, setStartDate] = useState<Date>(new Date(\"2020-03-01\"));\n  const [endDate, setEndDate] = useState<Date>(new Date(\"2020-06-30\"));\n  const [startTime, setStartTime] = useState<Date>(\n    parse(\"8:00 AM\", \"h:m a\", new Date())\n  );\n  const [endTime, setEndTime] = useState<Date>(\n    parse(\"5:00 PM\", \"h:m a\", new Date())\n  );\n  const [daysOfWeek, setDaysOfWeek] = React.useState({\n    monday: true,\n    tuesday: true,\n    wednesday: true,\n    thursday: true,\n    friday: true,\n    saturday: false,\n    sunday: false,\n  });\n  const [wfhUsage, setWfhUsage] = useState<number | undefined>();\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\n\n  const classes = useStyles();\n\n  const isDayOfWeekMatch = useCallback(\n    (date: Date) => {\n      const dateDayOfWeek = date.getDay();\n\n      switch (dateDayOfWeek) {\n        case 0:\n          return daysOfWeek.sunday;\n        case 1:\n          return daysOfWeek.monday;\n        case 2:\n          return daysOfWeek.tuesday;\n        case 3:\n          return daysOfWeek.wednesday;\n        case 4:\n          return daysOfWeek.thursday;\n        case 5:\n          return daysOfWeek.friday;\n        case 6:\n          return daysOfWeek.saturday;\n        default:\n          throw new Error();\n      }\n    },\n    [daysOfWeek]\n  );\n\n  const isHourScheduleMatch = useCallback(\n    (hour: number) => {\n      // convert time to hours represented in decimal (e.g. 9:30 = 9.5)\n      const startTimeHoursDecimal =\n        startTime.getHours() + (startTime.getMinutes() >= 30 ? 0.5 : 0);\n      const endTimeHoursDecimal =\n        endTime.getHours() + (endTime.getMinutes() >= 30 ? 0.5 : 0);\n\n      return hour >= startTimeHoursDecimal && hour < endTimeHoursDecimal;\n    },\n    [startTime, endTime]\n  );\n\n  /** Handle uploading data */\n  useMemo(async () => {\n    if (!usageFile) return;\n\n    try {\n      setUsageData(await parseCsv(usageFile));\n    } catch {\n      // todo: handle error parsing CSV\n    }\n  }, [usageFile]);\n\n  useMemo(async () => {\n    if (!usageData) return;\n\n    setIsProcessing(true);\n\n    // filter usage data by consumption\n    const consumptionData = usageData.filter(\n      (x) =>\n        x.date >= startDate &&\n        x.date <= endDate &&\n        isDayOfWeekMatch(x.date) &&\n        x.type === \"consumption\"\n    );\n\n    let wfhUsage = 0;\n    consumptionData.map((record) => {\n      for (const [key, value] of Object.entries(record.usageByHalfHour)) {\n        // our data's keys are represented as a decimal value (e.g. 9:30 = 9.5)\n        let hour = parseFloat(key);\n        if (isHourScheduleMatch(hour)) {\n          wfhUsage += value;\n        }\n      }\n    });\n\n    setWfhUsage(wfhUsage);\n\n    setIsProcessing(false);\n  }, [usageData, startDate, endDate, isDayOfWeekMatch, isHourScheduleMatch]);\n\n  const handleDaysOfWeekChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDaysOfWeek({ ...daysOfWeek, [event.target.name]: event.target.checked });\n  };\n\n  const onFilesAdded = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n\n    if (files?.length !== 1) {\n      return;\n    }\n\n    const file = files.item(0);\n\n    if (!file) {\n      return;\n    }\n\n    setUsageFile(file);\n\n    // clear file input\n    if (fileInputRef.current) fileInputRef.current.value = \"\";\n  };\n\n  const upload = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <Container maxWidth=\"sm\" className={classes.container}>\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item xs>\n          <Typography variant=\"h5\" className={classes.title} gutterBottom>\n            <HomeIcon />\n            Home office electricity calculator using Victorian Energy Compare\n            Data\n          </Typography>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            To help calculating the electricity usage while working from home\n            during lockdown for the \"\n            <a\n              href=\"https://www.ato.gov.au/individuals/income-and-deductions/deductions-you-can-claim/home-office-expenses/#Actualcostmethod\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              actual cost method\n            </a>\n            \" of deducting home office expenses, this tool automatically\n            calculates your electricity usage from the{\" \"}\n            <a\n              href=\"https://www.victorianenergysaver.vic.gov.au/energy-advice-for-business/accessing-and-understanding-energy-data\"\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              Victorian Energy Compare Data\n            </a>\n            .\n          </Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n          <Typography variant=\"h6\" className={classes.heading}>\n              <InsertDriveFileIcon />\n              Victorian Energy Compare Data\n            </Typography>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Export your Victorian Energy Compare Data CSV file from your{\" \"}\n              <a\n                href=\"https://www.victorianenergysaver.vic.gov.au/energy-advice-for-business/accessing-and-understanding-energy-data#portal\"\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                electricity distributor's website\n              </a>\n              .\n            </Typography>\n            <input\n              ref={fileInputRef}\n              style={{ display: \"none\" }}\n              type=\"file\"\n              accept=\"text/csv\"\n              onChange={onFilesAdded}\n            />\n            <Box textAlign=\"center\" marginY={3}>\n              <Button\n                onClick={upload}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n              >\n                Select your Victorian Energy Compare CSV\n              </Button>\n              <FormHelperText style={{ textAlign: \"center\", marginTop: 10 }}>\n                No data is uploaded to any servers, processing is done in your\n                browser on your device.\n              </FormHelperText>\n            </Box>\n            {usageFile && (\n              <Box className={classes.uploaded}>\n                File name: {usageFile?.name}\n                <br />\n                File size: {usageFile?.size.toString()} bytes\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <DateRangeTwoToneIcon />\n              Working from home schedule\n            </Typography>\n            <Typography variant=\"subtitle1\" gutterBottom>\n              Choose the appropriate times you work from home.\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item sm={6}>\n                <FormControl>\n                  <FormLabel>Dates</FormLabel>\n                  <KeyboardDatePicker\n                    autoOk\n                    disableToolbar\n                    variant=\"inline\"\n                    label=\"Start date\"\n                    format=\"dd/MM/yyyy\"\n                    inputVariant=\"outlined\"\n                    value={startDate}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    onChange={(date) => date && setStartDate(date)}\n                    margin=\"normal\"\n                  />\n                  <KeyboardDatePicker\n                    autoOk\n                    disableToolbar\n                    variant=\"inline\"\n                    label=\"End date\"\n                    format=\"dd/MM/yyyy\"\n                    inputVariant=\"outlined\"\n                    value={endDate}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    onChange={(date) => date && setEndDate(date)}\n                    margin=\"normal\"\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item sm={6}>\n                <FormControl>\n                  <FormLabel>Hours</FormLabel>\n                  <KeyboardTimePicker\n                    label=\"Start time\"\n                    mask=\"__:__ _M\"\n                    inputVariant=\"outlined\"\n                    value={startTime}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    minutesStep={30}\n                    onChange={(date) => date && setStartTime(date)}\n                    margin=\"normal\"\n                  />\n                  <KeyboardTimePicker\n                    label=\"End time\"\n                    mask=\"__:__ _M\"\n                    inputVariant=\"outlined\"\n                    value={endTime}\n                    InputAdornmentProps={{ position: \"start\" }}\n                    minutesStep={30}\n                    onChange={(date) => date && setEndTime(date)}\n                    margin=\"normal\"\n                  />\n                  <FormHelperText>\n                    Usage data is only available in 30 minute increments\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            </Grid>\n            <Box marginTop={2}>\n              <FormControl>\n                <FormLabel>Days of week</FormLabel>\n                <FormGroup row>\n                  {[\n                    \"Monday\",\n                    \"Tuesday\",\n                    \"Wednesday\",\n                    \"Thursday\",\n                    \"Friday\",\n                    \"Saturday\",\n                    \"Sunday\",\n                  ].map((value) => (\n                    <FormControlLabel\n                      key={value}\n                      control={\n                        <Checkbox\n                          checked={(daysOfWeek as any)[value.toLowerCase()]}\n                          onChange={handleDaysOfWeekChange}\n                          name={value.toLowerCase()}\n                        />\n                      }\n                      label={value}\n                    />\n                  ))}\n                </FormGroup>\n              </FormControl>\n            </Box>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Paper className={classes.paper}>\n            <Typography variant=\"h6\" className={classes.heading}>\n              <PowerIcon />\n              Electricity usage\n            </Typography>\n            {isProcessing && <CircularProgress />}\n            {!isProcessing && (\n              <>\n                {wfhUsage !== undefined && wfhUsage > 0 && (\n                  <Box\n                    fontSize={28}\n                    m={4}\n                    textAlign=\"center\"\n                    color=\"primary.main\"\n                  >\n                    <Box>{Math.round(wfhUsage * 1000) / 1000} kWh</Box>\n                  </Box>\n                )}\n                {wfhUsage !== undefined && wfhUsage === 0 && (\n                  <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                    No electricity usage\n                  </Box>\n                )}\n                {wfhUsage === undefined && (\n                  <Box m={4} textAlign=\"center\" color=\"text.secondary\">\n                    Select data to calculate usage\n                  </Box>\n                )}\n              </>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { Upload } from \"./components/Calculator\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nfunction App() {\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <React.Fragment>\n        <CssBaseline />\n        <Upload />\n      </React.Fragment>\n    </MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}